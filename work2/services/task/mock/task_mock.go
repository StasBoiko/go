// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"
	models "work2/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CreateOneTask mocks base method.
func (m *MockTaskRepository) CreateOneTask(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOneTask indicates an expected call of CreateOneTask.
func (mr *MockTaskRepositoryMockRecorder) CreateOneTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneTask", reflect.TypeOf((*MockTaskRepository)(nil).CreateOneTask), ctx, task)
}

// DeleteOneTask mocks base method.
func (m *MockTaskRepository) DeleteOneTask(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneTask indicates an expected call of DeleteOneTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteOneTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteOneTask), ctx, task)
}

// FirstTask mocks base method.
func (m *MockTaskRepository) FirstTask(ctx context.Context, task *models.Task, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstTask", ctx, task, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FirstTask indicates an expected call of FirstTask.
func (mr *MockTaskRepositoryMockRecorder) FirstTask(ctx, task, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstTask", reflect.TypeOf((*MockTaskRepository)(nil).FirstTask), ctx, task, id)
}

// GetAllTasks mocks base method.
func (m *MockTaskRepository) GetAllTasks(ctx context.Context, tasks *[]models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskRepositoryMockRecorder) GetAllTasks(ctx, tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetAllTasks), ctx, tasks)
}

// GetAllUserTasks mocks base method.
func (m *MockTaskRepository) GetAllUserTasks(ctx context.Context, tasks *[]models.Task, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserTasks", ctx, tasks, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllUserTasks indicates an expected call of GetAllUserTasks.
func (mr *MockTaskRepositoryMockRecorder) GetAllUserTasks(ctx, tasks, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetAllUserTasks), ctx, tasks, userId)
}

// GetDayTasks mocks base method.
func (m *MockTaskRepository) GetDayTasks(ctx context.Context, t time.Time, userId uint) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayTasks", ctx, t, userId)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayTasks indicates an expected call of GetDayTasks.
func (mr *MockTaskRepositoryMockRecorder) GetDayTasks(ctx, t, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetDayTasks), ctx, t, userId)
}

// GetMonthTasks mocks base method.
func (m *MockTaskRepository) GetMonthTasks(ctx context.Context, t time.Time, userId uint) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTasks", ctx, t, userId)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTasks indicates an expected call of GetMonthTasks.
func (mr *MockTaskRepositoryMockRecorder) GetMonthTasks(ctx, t, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetMonthTasks), ctx, t, userId)
}

// GetYearTasks mocks base method.
func (m *MockTaskRepository) GetYearTasks(ctx context.Context, t time.Time, userId uint) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearTasks", ctx, t, userId)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearTasks indicates an expected call of GetYearTasks.
func (mr *MockTaskRepositoryMockRecorder) GetYearTasks(ctx, t, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetYearTasks), ctx, t, userId)
}

// SaveTask mocks base method.
func (m *MockTaskRepository) SaveTask(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTaskRepositoryMockRecorder) SaveTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTaskRepository)(nil).SaveTask), ctx, task)
}
